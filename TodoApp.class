<?php

use \Utility as Util;

function debug($x, $exit = true) {  Util::debug($x, $exit); }

class TodoApp
{
   const  NAME      = 'mugtodo';
   const  VERSION   = '0.0.1 (alpha)';
   const  COPYRIGHT = 'https://macuser.group';
   const  STATUS_PENDING   = 'pending';
   const  STATUS_COMPLETED = 'done';
   const  STATUS_DELETED   = 'deleted';
   const  DEFAULT_LIST_SLUG = 'work';
   public $homeDir;
   public $shortArgs;
   public $longArgs;
   public $commands;
   public $timezone;
   private $jsonFile;
   private $logFile;
   private $db;
   
   function __construct()
   {
      $this->homeDir    = getenv("HOME");
      $this->setTimezone();
      $this->startTime  = microtime(true);
      $this->scriptName = basename(__FILE__);
      $this->shortArgs  = "hla:d:s:p:n:c:d:t:";
      $this->longArgs   = ["help", "list:", "add:", "change:",  "done:", "meta:", "start:", "pause:", "stop", "note:", "stats", "to:",
                           "search:", "find:", "create:", "status:", "delete:", "toggle:"];

      $this->jsonFile   = sprintf("%s/.%s.json", $this->homeDir, self::NAME);
      $this->logFile    = sprintf("%s/.%s.log",  $this->homeDir, self::NAME);

      $this->getCommands();

      if (!$this->commands)
           $this->syntax();

      $this->read();
   }

   public function run()
   {
      $this->runCommand();
   }

   private function runCommand()
   {
       foreach($this->commands as $cmd => $args)
       {
            switch($cmd)
            {
               case 'add'    : $this->add($args); break;
               case 'list'   : $this->list($args); break;
               case 'change' : $this->change($args); break;
               case 'delete' : $this->delete($args); break;
               case 'search' : 
               case 'find'   : $this->search($args); break;
               default       : $this->impliedSearch($args);
            }
       }
   }

   private function impliedSearch($args)
   {

       $intersect = array_intersect(array_keys($this->commands), ['add', 'change', 'list', 'delete']);

       // Cannot do implicit search if one of the action commands above is present
       if (count($intersect) > 0)
           return false;

       $this->search('.');
   }

   private function search($keyword)
   {
       $keyword = trim($keyword);

       if (empty($keyword) && empty($this->commands['meta']) && $this->commands['for'])
           return false;

       $found = [];
       $lists = $this->db['lists'];
       $searchMeta = false;
       $searchFor  = false;

       if ($this->commands['for'])
       {
          $forWho = strtoupper($this->commands['for']);
          $searchFor = true;
       }

       if ($this->commands['meta'])
       {
          $meta = $this->getMeta();
          $findMetaKey   = array_keys($meta)[0];
          $findMetaValue = strtoupper(array_values($meta)[0]);
          $searchMeta    = true;
       }

       foreach($lists as $listSlug => $items)
       {
            foreach($items as $itemSlug => $thisItem)
            {
               $task  = $thisItem['task'];
               $tags  = $thisItem['tags'];
               $meta  = is_array($thisItem['meta']) ? array_map('strtoupper', $thisItem['meta']) : null;
               $for   = $thisItem['for'];

               if (!empty($keyword) && preg_match("/$keyword/i", $task))
                  $found[$listSlug][$itemSlug] = $thisItem;

               if (is_array($tags)) foreach($tags as $thisTag => $added)
               {
                  if (preg_match("/$keyword/i", $thisTag))
                        $found[$listSlug][$itemSlug] = $thisItem;
               }

               if ($searchMeta && is_array($meta) && $meta[$findMetaKey] == $findMetaValue)
                   $found[$listSlug][$itemSlug] = $thisItem;
               else if ($searchMeta)
                   unset($found[$listSlug][$itemSlug]);

            }
       }

       if ($found)
       {

            if ($searchFor) 
            {
               foreach($found as $listSlug => $items)
               {
                  foreach($items as $itemSlug => $thisItem)
                  {
                      if ($for = $thisItem['for'])
                      {
                          if (strtoupper($for) != $forWho)
                              unset($items[$itemSlug]);
                      }

                     if (count($items) > 0)
                         $found[$listSlug] = $items;
                     else
                         unset($found[$listSlug]);

                  }
               }
            } 

            foreach($found as $listSlug => $items)
            {
               printf("\nList: %s .. match found: %s \n", $listSlug, count($items));
               $this->showPartialList($items);
            }
       }
      
       exit;
   }

   private function delete($task)
   {
      $confirmed = false;
      $currentListSlug = isset($this->db['current']['list']) ?  $this->db['current']['list'] : self::DEFAULT_LIST_SLUG;
      $listName = !empty($this->commands['list']) ? $this->commands['list'] : $currentListSlug;
      $listSlug = Util::createSlug($listName);

      $for = !empty($this->commands['for']) ? strtoupper($this->commands['for']) : null;

      if (!$items = $this->db['lists'][$listSlug])
          return $this->showError("Sorry cannot find items for $listSlug list\n");

   
      if (!$deleteAll = preg_match("/^(all)$/i", $task, $matches) ? true : false)
      {
         if (!preg_match("/#(\d+)$/i", $task, $matches))
              return $this->showError("Sorry, you need to pass the item # to delete it from a list");

         $pos   = $matches[1] - 1;
         $task = $matches[2];
      }

      if (!$confirmed)
      {
         $prompt =  'Are you sure (yes/no)?';
         $answer = Util::readInput($prompt, ["accepted" => ['yes', 'no']]);
         if ($answer == 'no')
             return false;
      }

      $i = 0;

      $newItems = [];
   
      foreach($items as $md5 => $details)
      {
         $thisFor = strtoupper($details['for']);

         if ($deleteAll  && ($for == $thisFor || !$for))
             continue;

         // If deleting a specific item
         if (!$for && $i++ == $pos)
            continue;
   
         $newItems[$md5] = $details;
      }

      $this->db['lists'][$listSlug] = $newItems;
      $this->write();
      $this->showList($listSlug);
      return false;
   }

   private function change($task)
   {
      $currentListSlug = isset($this->db['current']['list']) ?  $this->db['current']['list'] : self::DEFAULT_LIST_SLUG;
      $listName = !empty($this->commands['list']) ? $this->commands['list'] : $currentListSlug;
      $listSlug = Util::createSlug($listName);

      $for = $this->getOwner();

      if (!preg_match("/#(\d+)(\s+(.+))?/i", $task, $matches))
         return $this->showError("Sorry, you need to pass the item # to change it from a list");

      $pos  = $matches[1] - 1;
      $task = trim($matches[2]);

      if (!$items = $this->db['lists'][$listSlug])
          return $this->showError("Sorry cannot find items for $listSlug list\n");
      
      $tag  = $this->getTag();
      $tags = [];
              
      $i = 0;

      $newItems = [];
      foreach($items as $md5 => $details)
      {
         if ($i == $pos)
         {
            // If user is just adding a tag and not changing the actual item
            // keep the old task
            if (empty($task))
                $task = $this->db['lists'][$listSlug][$md5]['task'];

            $meta   = $this->updateMeta($listSlug, $md5);

            $status = $this->updateStatus($listSlug, $md5);
            $tags   = $this->updateTags($listSlug, $md5);

            $md5 = md5(trim($task));

            $details = ['task' => $task, 
                        'added'   => $details['added'], 
                        'for'     => $for,
                        'tags'    => $tags,
                        'updated' => time(), 
                        'status'  => $status,
                        'meta'    => $meta
                      ];
         } 

         $newItems[$md5] = $details;
         $i++;
      }

      $this->db['lists'][$listSlug] = $newItems;
      $this->write();
      return false;
   }

   private function add($task)
   {
       $changed  = false;
       $currentListSlug = isset($this->db['current']['list']) ?  $this->db['current']['list'] : self::DEFAULT_LIST_SLUG;
       $listName = !empty($this->commands['list']) ? $this->commands['list'] : $currentListSlug;
       $listSlug = Util::createSlug($listName);
       $taskMD5  = md5(Util::createSlug($task));
       $now      = time();
       $for      = $this->getOwner();

       $this->db['current']['list'] = $listSlug;

       if (!isset($this->db['lists'][$listSlug][$taskMD5]['task']))
       {
          $changed = true; 
          $this->db['lists'][$listSlug][$taskMD5] = [
                                                        'task' => $task, 
                                                        'added' => $now, 
                                                        'for'   => $for,
                                                        'status' => self::STATUS_PENDING
                                                      ];
         
       }
       
       if ($this->updateMeta($listSlug, $taskMD5))
           $changed = true;

       if ($newTag   = $this->getTag())
       {
          $this->db['lists'][$listSlug][$taskMD5]['tags'][$newTag] = time();
          $changed = true;
       }

       if ($changed)
          $this->write();
           
       $this->showList();
   }

   private function getMeta()
   {
       if (empty($this->commands['meta']))
           return false;

       $args = trim($this->commands['meta']);

       if (preg_match("/(\w+)\s*=?\s*(.+)?/", $args, $matches))
       {
          array_shift($matches);
          $args = array_map('trim', $matches);

       }  else {
         $args = array_map('trim', explode(' ',    $args));
       }
       
       if (!is_array($args) || count($args) <= 1)
          $this->showError("Please use --meta key value format");

      $key   = array_shift($args);
      $value = trim(join(' ', $args));

      return [$key => $value];

   }

   private function getTag()
   {
       return !empty($this->commands['tag']) ? Util::createSlug($this->commands['tag']) : null;
   }

   private function updateStatus($listSlug, $itemID)
   {
       $oldStatus = $this->db['lists'][$listSlug][$itemID]['status'];
       $oldStatus = isset($oldStatus) ? $oldStatus : self::STATUS_PENDING;
       $status = !empty($this->commands['status']) ? $this->commands['status'] : $oldStatus;
       return $status;
   }

   private function updateTags($listSlug, $itemID)
   {
      if (!$newTag  = $this->getTag())
         return false;

      $tags = $this->db['lists'][$listSlug][$itemID]['tags'];
      $tags = isset($tags) ? $tags : [];
      $this->db['lists'][$listSlug][$itemID]['tags'][$newTag] = time();

      return $this->db['lists'][$listSlug][$itemID]['tags'];

   }


   private function updateMeta($listSlug, $itemID)
   {
      if (!$newMeta  = $this->getMeta())
         return false;

      $metaData = $this->db['lists'][$listSlug][$itemID]['meta'];
      $metaData = isset($metaData) ? $metaData : [];

      // We want new meta to replace existing key=val so new meta needs to be paran #2
      $this->db['lists'][$listSlug][$itemID]['meta'] = array_merge($metaData, $newMeta);
    
      return $this->db['lists'][$listSlug][$itemID]['meta'];

   }


   private function getOwner()
   {
       $owner = !empty($this->commands['for']) ? $this->commands['for'] : getenv('USER');
       return Util::createSlug($owner);
   }

   private function list($args)
   {
      if (strtolower($args) == 'all')
      {
         if (!isset($this->db['lists']))
             return $this->showError("No list found.");

         foreach($this->db['lists'] as $listSlug => $details)
         {
            $this->showList($listSlug, false);
         }

         exit;

      } else {
         return $this->showList($args, true);
      }

   }

   private function showPartialList($items = null)
   {
      $i = ord('a');

      foreach($items as $task => $details)
      {
         $ch = chr($i++);
         printf("%s) %-40s ... %-15s ... %s ... %s\n", $ch, $details['task'], $details['for'], $details['status'], date('m/d/y h:i a', $details['added']));
      }

      printf("\n");
   
   }

   private function showList($listSlug = null, $exit = true)
   {
      if (empty($listSlug))
          $listSlug = isset($this->db['current']['list']) ?  $this->db['current']['list'] : self::DEFAULT_LIST_SLUG;

      if (!$items = $this->db['lists'][$listSlug])
          return false;

      $i = 0;
      printf("\n%s:\n", strtoupper($listSlug));
      foreach($items as $task => $details)
      {
         $i++;
         printf("%d) %-40s ... %-15s ... %s ... %s\n", $i, $details['task'], $details['for'], $details['status'], date('m/d/y h:i a', $details['added']));
      }
      printf("\n");

      if ($exit)
          exit();
   
   }

   public function syntax()
   {
      $usage = $this->getUsage();
      $n = $this->scriptName;
      printf("%s version: %s\n", $n, self::VERSION);
      printf("\nYou have used this software %d time%s so far! Thank you!", $usage, ($usage > 1) ? 's' : '');
      printf("\nSee: %s for usage/tutorial videos.\n\n", self::COPYRIGHT);
      exit;
   }

   private function getCommands()
   {
      $args     = Util::getRawArgs();
      $started  = false;
      $curCmd   = null;
      $commands = null;

      array_shift($args);

      foreach($args as $x) 
      {   
         if (preg_match("/^\-+(\w+)/", $x, $matches)) 
         {
             $curCmd = $matches[1];
             $commands[$curCmd] = null;
             $started = true;
             continue;
         }

         if ($started)
         {
             $commands[$curCmd]['params'][] = trim($x);
         }
      }

      if ($commands)
      {
         foreach($commands as $cmd => $details)
         {
            $options = null;
            if (is_array($details['params']))
                $options = join(' ', $details['params']);
        
            $this->commands[$cmd] = $options;
         }
      }


      // Order by alpha so that --add is first (if present)
      if ($this->commands)
          ksort($this->commands, SORT_STRING);

      return true;
   }

   private function getUsage()
   {
      return isset($this->db['internal']['usage']) ? $this->db['internal']['usage'] : 1;
   }

   private function setTimezone()
   {
      $this->timezone = Util::getMacOSLocalTimezone();
      date_default_timezone_set ($this->timezone);
   }

   private function showError($msg)
   {
      die($msg);
   }

   private function read()
   {
      if (!file_exists($this->jsonFile))
          return false;

      $this->db  = json_decode(file_get_contents($this->jsonFile), true);

      $jsonError = json_last_error();

      if ($jsonError != JSON_ERROR_NONE)
      {
          $this->log("Cannot load {$this->jsonFile}. Error code: $jsonError");
          die();
      }
      return true;
   }

   private function write()
   {
      $this->db['internal']['usage'] = $this->getUsage() + 1;
      $this->db['internal']['lists'] = count($this->db['lists']);

      $json = json_encode($this->db, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);

      file_put_contents($this->jsonFile, $json);
   }


} // End of TodoApp class